server:
  tomcat:
    protocol-header: x-forwarded-proto
    uri-encoding: UTF-8
  port: 10005

spring:
  servlet:
    multipart:
      enabled: true
      file-size-threshold: 2KB
      max-file-size: 200MB
      max-request-size: 215MB
  http:
    encoding:
      charset: UTF-8
      enabled: true
      force: true
  h2:
    console:
      enabled: true
      path: /h2
      # spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
      #spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:~/test
    username: sa
    password: test

  jpa:
    #show-sql: true                       # System.out 으로 출력. logging.level.org.hibernate.SQL=debug 로 대체합니다.
    hibernate:
      # create : entity를 drop cascade 하고 다시 생성
      # update : entity가 수정되면 수정된 내용만 반영
      # create-drop,validate, none
      # 하이버네이트가 자동으로 생성해주는 DDL은 신뢰성이 떨어지기 때문에
      # 절대로! 운영DB 환경에서 그대로 사용하면 안되고, 직접 DDL을 작성하는 것을 권장
      ddl-auto: create
    properties:                          # Additional native properties to set on the JPA provider.
      hibernate:
        #show-sql: true                  # System.out 으로 출력
        format_sql: true                 # 로그, 콘솔의 SQL을 좀 더 이쁘게 출력합니다.
        #highlight_sql: true             # SQL 출력을 ANSI escape codes를 사용하여 색을 부여합니다.
        #use_sql_comments: true          # 보다 쉬운 디버깅을 위해 SQL 내부에 /* */의 주석을 추가합니다.
        jdbc.loc_non_contextual_creation: true

